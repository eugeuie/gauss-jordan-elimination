Программа решает задачу отыскания решения системы линейных уравнений методом Гаусса-Жордана с выбором главного элемента по столбцу.

Использование программы:
    lss [input_filename] [output_filename] [options]
    Опции включают:
        -d      печать отладочных сообщений [по умолчанию НЕТ]
        -e      печать ошибок [по умолчанию НЕТ]
        -p      печать матрицы [по умолчанию НЕТ]
        -t      печать времени выполнения программы [по умолчанию НЕТ]
        -h, -?  печать справки и выход
    По умолчанию имя входного файла - lss_01_05_in.txt, имя выходного файла - lss_01_05_out.txt.

Программа состоит из двух модулей:
    интерфейсного, находящегося в файле main_lss_01_05.c;
    вычислительного, находящегося в файле lss_01_05.c.

В интерфейсном модуле реализованы следующие функции:
    void exception(int code, const char *message)
        Обработка ошибок: функция печатает сообщение об ошибке и завершает программу с возвратом кода ошибки.
        Коды и описания ошибок:
            2: Ошибка: Некорректный синтаксис параметров командной строки. Такого параметра не существует
            3: Ошибка: Некорректный синтаксис параметров командной строки. Параметров, определяемых как имена файлов, слишком много (более двух)
            4: Ошибка: Некорректная очередность параметров командной строки
            5: Ошибка: Такого файла не существует
            6: Ошибка: Файл пуст
            7: Ошибка: Значение n не является положительным целым числом
            8: Ошибка: Недостаточно элементов в матрице
            9: Ошибка: Элемент матрицы не является числом или значение n не является положительным целым числом
        ------------------------------
        Параметры:
            code: целое число - код ошибки
            message: указатель на неизменяемый символ - описание ошибки
        ------------------------------
        Возвращаемые значения (нет)

    int string_length(const char *string)
        Подсчет длины массива символов.
        ------------------------------
        Параметры:
            string: указатель на неизменяемый символ - массив символов
        ------------------------------
        Возвращаемые значения (целое число):
            Количество символов в массиве string

    int file_exists(const char *filename)
        Проверка существования файла с заданным именем.
        ------------------------------
        Параметры:
            filename: указатель на неизменяемый символ - имя файла (путь к файлу)
        ------------------------------
        Возвращаемые значения (целое число):
            0: Файла с таким именем не существует
            1: Файл с таким именем существует

    void validate_params(int argc, char *argv[], char **input_filename, char **output_filename)
        Валидация параметров командной строки, присваивание заданных в параметрах командной строки имен входного и выходного файла переменным input_filename и output_filename соответственно: при обнаружении ошибки в синтаксисе или очередности параметров командной строки данная функция вызывает функцию exception, передавая в качестве аргументов код ошибки и описание ошибки.
        ------------------------------
        Параметры:
            argc: целое число - количество аргументов командной строки
            argv: массив указателей на символы - аргументы командной строки
            input_filename: указатель на указатель на символ - имя входного файла
            output_filename: указатель на указатель на символ - имя выходного файла
        ------------------------------
        Возвращаемые значения (нет)

    void input(const char *input_filename, double **A, double **B, int *n)
        Считывание значения n из входного файла, выделение памяти для массивов A и B, считывание значений элементов матрицы A и вектора B из входного файла, проверка корректности входных значений: при обнаружении некорректных входных значений данная функция вызывает функцию exception, передавая в качестве аргументов код ошибки и описание ошибки.
        ------------------------------
        Параметры:
            input_filename: указатель на неизменяемый символ - имя входного файла
            A: указатель на указатель на вещественное число - матрица A
            B: указатель на указатель на вещественное число - вектор B
            n: целое число - размерность матрицы A и вектора B
        ------------------------------
        Возвращаемые значения (нет)

    void print_help()
        Печать краткого руководства по использованию программы.
        ------------------------------
        Параметры (нет)
        ------------------------------
        Возвращаемые значения (нет)

    void print_matrix(int n, double *A, double *B, const double *tmp)
        Печать матрицы A и вектора B с соблюдением порядка уравнений, указанного в массиве tmp.
        ------------------------------
        Параметры:
            n: целое число - размерность матрицы A и вектора B
            A: указатель на вещественное число - матрица A
            B: указатель на вещественное число - вектор B
            tmp: указатель на неизменяемое вещественное число - индексы, определяющие порядок уравнений системы
        ------------------------------
        Возвращаемые значения (нет)

    void output(const char *output_filename, int result, int n, const double *X)
        Запись решения X (если решение системы существует) или 0 (если решения системы не существует) в выходной файл.
        ------------------------------
        Параметры:
            output_filename: указатель на неизменяемый символ - имя выходного файла
            result: целое число - значение, возвращенное функцией lss_01_05
            n: целое число - размерность матрицы A и вектора B
            X: указатель на неизменяемое вещественное число - вектор решения X
        ------------------------------
        Возвращаемые значения (нет)

В вычислительном модуле реализованы следующие функции:
    size_t lss_memsize_01_05(int n)
        Определение размера дополнительной памяти, требуемой методу: размер дополнительной памяти определяется как произведение n и размера типа double.
        ------------------------------
        Параметры:
            n: целое число - размерность матрицы A и вектора B
        ------------------------------
        Возвращаемые значения (неотрицательное целое число):
            Размер дополнительной памяти

    int zero_coefficients_row(int n, double *A, double *B, const double *tmp, int k)
        Проверка, является ли k-я (соответственно порядку строк, указанному в массиве tmp) строка коэффициентов матрицы A нулевой и k-й элемент вектора B - нулевым.
        ------------------------------
        Параметры:
            n: целое число - размерность матрицы A и вектора B
            A: указатель на вещественное число - матрица A
            B: указатель на вещественное число - вектор B
            tmp: указатель на неизменяемое вещественное число - индексы, определяющие порядок уравнений системы
            k: целое число - порядковый номер проверяемой строки
        ------------------------------
        Возвращаемые значения (целое число):
            0: Хотя бы один из коэффициентов строки не равен нулю
            1: Строка состоит только из нулевых коэффициентов

    int pivot_row_index(int n, double *A, const double *tmp, int k)
        Выбор главного элемента по столбцу: выбор осуществляется среди коэффициентов матрицы A при неизвестной x_k, главным элементом по столбцу считается наибольший по модулю коэффициент матрицы A при неизвестной x_k.
        ------------------------------
        Параметры:
            n: целое число - размерность матрицы A и вектора B
            A: указатель на вещественное число - матрица A
            tmp: указатель на неизменяемое вещественное число - индексы, определяющие порядок уравнений системы
            k: целое число - порядковый номер неизвестной, среди коэффициентов которой осуществляется поиск главного элемента
        ------------------------------
        Возвращаемые значения (целое число):
            Порядковый номер строки, в которой находится главный по столбцу элемент
            -1: Столбец коэффициентов матрицы A при неизвестной x_k состоит из нулей

    void rows_indices_swap(double *row_indices, int first_row_index, int second_row_index)
        Перестановка номеров first_row_index и second_row_index в массиве номеров строк row_indices.
        ------------------------------
        Параметры:
            row_indices: указатель на вещественное число - индексы, определяющие порядок уравнений системы
            first_row_index: целое число - порядковый номер строки
            second_row_index: целое число - порядковый номер другой строки
        ------------------------------
        Возвращаемые значения (нет)

    int lss_01_05(int n, double *A, double *B, double *X, double *tmp)
        Решение задачи отыскания решения системы линейных уравнений методом Гаусса-Жордана:
            Осуществляется инициализация вектора решения X значениями -1.
            Осуществляется проход по всем строкам с номерами k = 0, ..., n матрицы A и всем элементам вектора B, соответственно:
                Осуществляется выбор главного элемента при помощи функции pivot_row_index.
                Если функция pivot_row_index вернула значение -1 (это происходит в случае, если столбец коэффициентов матрицы A при неизвестной x_k состоит из нулей), то если не все коэффициенты в рассматриваемой k-й строке равны нулю и k-я строка не является последней, то неизвестной x_k присваивается значение 0 (x_k считается свободной неизвестной) и при помощи функции rows_indices_swap в массиве tmp, хранящем порядок уравнений системы, осуществляется перестановка номера k и номера первой нулевой строки, встретившейся в матрице A, затем осуществляется переход к следующему шагу цикла.
                Если функция pivot_row_index вернула значение pivot_row, отличное от -1 и отличное от номера k рассматриваемой строки, то при помощи функции rows_indices_swap осуществляется перестановка номеров k и pivot_row в массиве tmp, хранящем порядок уравнений системы. Таким образом, номер k присваивается уравнению системы, в котором находится главный элемент по столбцу k матрицы A.
                k-й элемент вектора B и k-я строка матрицы A подвергаются нормировке главным элементом a_k_k:
                    b_k = b_k / a_k_k
                    Для j = n - 1, ..., k:    a_k_j = a_k_j / a_k_k
                Для i = 0, ..., k - 1, k + 1, ..., n - 1:    b_i = b_i - a_i_k * b_k.
                Затем происходит обнуление поддиагональных и наддиагональных элементов k-го столбца:
                    Для j = n - 1, ..., k:
                        Для i = 0, ..., k - 1, k + 1, ..., n - 1:    a_i_j = a_i_j - a_i_k / a_k_j
            Для i = 0, ..., n: если элемент x_i не равен нулю, то элементу x_i присваивается значение b_i; если a_i_i равен нулю, а элемент x_i при этом не равен нулю, то функция lss_01_05 возвращает 1 (так как решения системы в данном случае не существует).
            Функция lss_01_05 возвращает значение 0 (так как решение системы построено).
        ------------------------------
        Параметры:
            n: целое число - размерность матрицы A и вектора B
            A: указатель на вещественное число - матрица A
            B: указатель на вещественное число - вектор B
            X: указатель на вещественное число - вектор решения X
            tmp: указатель на вещественное число - индексы, определяющие порядок уравнений системы
        ------------------------------
        Возвращаемые значения (целое число):
            0: Решение построено
            1: Решения системы не существует

В данной реализации метода Гаусса-Жордана с выбором главного элемента по столбцу переставляются не строки матрицы, а их номера. Массив tmp длиной n содержит номера строк матрицы A (и элементов вектора B). Вначале tmp[i] = i, i = 0, ..., n - 1. Обращение к элементам матрицы A происходит следующим образом: элемент a_i_j есть A[tmp[i] * n + j]. Обращение к элементам вектора B происходит следующим образом: элемент b_i есть B[tmp[i]]. Для того, чтобы переставить i-ю и j-ю строки матрицы A (и i-й и j-й элементы вектора B), достаточно переставить местами i-й и j-й элементы массива tmp.
Программа применима для всех видов систем линейных уравнений с квадратной матрицей A, в том числе для недоопределенных систем.

Использованная литература:
    К.Ю. Богачев "Практикум на ЭВМ. Методы решения линейных систем и нахождения собственных значений", Москва, 1998.
    С.П. Куксенко, Т.Р. Газизов "Итерационные методы решения системы линейных алгебраических уравнений с плотной матрицей", Томск, 2007.

Абдуллаева Евгения, группа М1-17.
